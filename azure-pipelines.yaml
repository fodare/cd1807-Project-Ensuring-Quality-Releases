trigger:
- main

pool:
  name: Default

variables:
  # python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Temp-connection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Temp-connection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2748819139'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: DownloadSecureFile@1
      displayName: Download SSH public key
      inputs:
        secureFile: 'azure_rsa.pub'

    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'Temp-connection'

    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
        
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      # 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
      inputs:
        script: 'newman run StarterAPIs.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman

    - task: CmdLine@2
      displayName: 60 Secs sleep
      inputs:
        script: |
          echo sleeping for 30 seconds
          sleep 60 && echo Dummy API has some throttling

    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      # 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
      inputs:
        script: 'newman run TestSuite.Regression.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        mergeTestResults: true

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: Default
     
    environment: test-vm  
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Temp-connection'
              appType: 'webApp'
              appName: 'sampleApplication-AppService'
              deployToSlotOrASE: true
              resourceGroupName: 'test-rg'
              slotName: 'production'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'zipDeploy'
              
          - task: TerraformTaskV4@4
            displayName: Terraform destroy
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: 'Temp-connection'
#           #--------------------------------------------#    
#           # Run JMeter test suite against the App Service
#           - task: CmdLine@2
#             inputs:
#               script: |
#                 wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
#                 tar -xf apache-jmeter-5.2.1.tgz
#                 unzip -o $(Build.BuildId)-perftests.zip
#                 ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
#                 cat jmeter.log                                                                           # ToDo: Write your commands
#               workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
#   #--------------------------------------------#  
#   # Selenium | Functional UI Tests
#   # ToDo: 
#   - deployment: VMDeploy
#     displayName: Selenium Tests
#     environment:
#       name:         # ToDo: Change/provide a name
#       resourceType: VirtualMachine
#       tags: selenium
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop-ui-tests     # ToDo: Change/provide a name
            
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |           
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 pip3 install selenium
#                 cd ~/
#                 DIR=/home/testuser/app
#                 if [ ! -d "$DIR" ]; then
#                     mkdir app
#                 fi
#                 mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
#                 cd app
#                 unzip -o $(Build.BuildId)-uitests.zip
#                 FILE=/home/testuser/app/chromedriver_linux64.zip
#                 if [ ! -f "$FILE" ]; then
#                     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
#                     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
#                     unzip -o chromedriver_linux64.zip
#                     sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
#                 fi
#                 export PATH=$PATH:/home/testuser/app
#                 echo "Starting Selenium Tests"
#                 python3 add_remove_from_cart.py >> selenium.log
#                 echo "Completed Selenium Tests. Check selenium.log for results."