trigger:
- main

pool:
  name: Default

variables:
  # python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Temp-connection1'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: clean
    displayName: Clean dir
    workspace:
      clean: all
  
  - job: BuildInfrastructure
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'TempConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate309048393'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: DownloadSecureFile@1
      displayName: Download SSH public key
      inputs:
        secureFile: 'azure_rsa.pub'

    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'TempConnection'
        
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      # 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
      inputs:
        script: 'newman run StarterAPIs.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman

    - task: CmdLine@2
      displayName: 60 Secs sleep
      inputs:
        script: |
          echo sleeping for 30 seconds
          sleep 60 && echo Dummy API has some throttling

    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      # 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
      inputs:
        script: 'newman run TestSuite.Regression.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        mergeTestResults: true

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: Default
    environment: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'TempConnection'
              appType: 'webApp'
              appName: 'sampleApplication-AppService'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
          - task: CmdLine@2
            displayName: Jmeter test
            inputs:
              script: |
                unzip -o $(Build.BuildId)-perftests.zip
                ~/Dev/Projects/Project-DevOps/apache-jmeter-5.6/bin/jmeter -n -t Starter.jmx -j jmeter.log
                cat jmeter.log                                                   
              workingDirectory: '$(Pipeline.Workspace)/drop-perftests'

  - deployment: VMDeploy
    dependsOn: FakeRestAPI
    displayName: Selenium Tests
    environment:
      name: selinusmtestserver
      resourceType: VirtualMachine
      # tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          
          # - download: current
          #   artifact: drop-uitests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt install unzip -y
                sudo apt-get install python3-pip -y
                pip install selenium

                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb -y

                wget -qP /tmp/ "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/117.0.5938.88/linux64/chromedriver-linux64.zip"
                sudo unzip -oj /tmp/chromedriver-linux64.zip -d /usr/bin
                cd ~/
                rm -rf cd1807-Project-Ensuring-Quality-Releases
                DIR=/home/azureUser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                git clone https://github.com/fodare/cd1807-Project-Ensuring-Quality-Releases.git
                cd cd1807-Project-Ensuring-Quality-Releases/automatedtesting/selenium/
                
                echo "Starting Selenium Tests"
                python3 login.py >> ~/app/selenium.log
                sudo python3 login.py >> /var/log/selenium.log
                cat ~/app/selenium.log
                echo "Completed Sleenium Tests. Check selenium.log for results."